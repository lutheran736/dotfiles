# File creation command
cmd mk ${{
    clear
    tput cup $(( $(tput lines) / 3 ))
    tput bold
    printf "Create new (name or path/): "
    read -r name
    name=${name#"${name%%[![:space:]]*}"}
    name=${name%"${name##*[![:space:]]}"}
    [ -z "$name" ] && echo "Canceled" && return 1

    if [[ "$name" == */* ]]; then
        mkdir -p -- "${name%/}"
    elif [[ "$name" == */ ]]; then
        mkdir -p -- "$name"
    else
        touch -- "$name"
    fi
    lf -remote "send $id select \"$name\""
}}

# Archive extraction with confirmation
cmd extract ${{
    clear
    tput cup $(($(tput lines)/3))
    tput bold
    set -f

    printf "%s\n\t" "$fx"
    printf "extract?[y/N] "
    read ans

    [ "$ans" != "y" ] && return 1

    case $(file --mime-type "$(readlink -f "$f")" -b) in
        application/cbt|application/tar|application/gtar|application/tar+bz2|application/tar+gz|application/tar+xz)
            tar xvf "$fx"
            ;;

        application/lzma)
            unlzma "$fx"
            ;;

        application/bzip2)
            bunzip2 "$fx"
            ;;

        application/vnd.rar)
            unrar x -ad "$fx"
            ;;

        application/gzip)
            gunzip "$fx"
            ;;

        application/zip|application/cbz|application/epub+zip)
            unzip "$fx"
            ;;

        application/x-compress)
            uncompress "$fx"
            ;;

        application/7z-compressed|application/arj|application/vnd.ms-cab-compressed|application/cb7|application/vnd.ms-htmlhelp|application/debian-package|application/apple-diskimage|application/iso9660-image|application/lzh-compressed|application/msi|application/apple-diskimage|application/redhat-package-manager|application/udf|application/ms-wim|application/xar)
            7z x "$fx"
            ;;

        application/xz)
            unxz "$fx"
            ;;

        application/vnd.microsoft.portable-executable)
            cabextract "$fx"
            ;;

        application/cpio)
            cpio -id < "$fx"
            ;;

        application/ace-compressed)
            unace x "$fx"
            ;;

        *)
            echo "Format not supported: $fx"
            ;;
    esac
}}

# Move files to directory selected via fzf from bookmarks
cmd moveto ${{
    set -f
    clear; tput cup $(($(tput lines)/3))
    dest=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs" | fzf --layout=reverse --height 40% --prompt 'Move to where? ' | sed 's|~|$HOME|')
    [ -z "$dest" ] && exit
    destpath=$(eval printf '%s' \"$dest\")
    clear; tput cup $(($(tput lines)/3)); tput bold
    echo "From:"
    echo "$fx" | sed 's/^/   /'
    printf "To:\n   %s\n\n\tmove?[y/N]" "$destpath"
    read -r ans
    [ "$ans" != "y" ] && exit
    for x in $fx; do
        mv -iv "$x" "$destpath"
    done &&
    notify-send "󰪹 File(s) moved." "File(s) moved to $destpath."
}}

# Copy files to directory selected via fzf from bookmarks
cmd copyto ${{
    set -f
    clear; tput cup $(($(tput lines)/3))
    dest=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs" | fzf --layout=reverse --height 40% --prompt 'Copy to where? ' | sed 's|~|$HOME|')
    [ -z "$dest" ] && exit
    destpath=$(eval printf '%s' \"$dest\")
    clear; tput cup $(($(tput lines)/3)); tput bold
    echo "From:"
    echo "$fx" | sed 's/^/   /'
    printf "To:\n   %s\n\n\tcopy?[y/N]" "$destpath"
    read -r ans
    [ "$ans" != "y" ] && exit
    for x in $fx; do
        cp -ivr "$x" "$destpath"
    done &&
    notify-send "󱀃 File(s) copied." "File(s) copied to $destpath."
}}

# Set background (parameter needed)
cmd setbg "$1"

# Bulk rename files using temp files and editor
cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd trash ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "move $(echo "$fx" | wc -l) file(s) to trash? [y/n]"
    read confirm

    files=$(printf "$fx" | tr '\n' ';')
    files=$(echo "$files" | sed 's/[[:space:]]\+/ /g')
    files=$(echo "$files" | sed 's/^ *//;s/ *$//')

  if [ "$confirm" != "y" ]; then
    echo "Operation canceled."
    exit 1
  fi

  while [ "$files" ]; do
    file=${files%%;*}
    trash-put "$(basename "$file")"
    lf --remote "send $id unselect $file"

    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

# Restore from trash
cmd trash_restore ${{
    file=$(trash-list | grep "$PWD" | awk '{$1=$2=""; print substr($0,3)}' | fzf --layout=reverse --height 40% --prompt 'Restore file?: ')
    [ -n $file ] && echo 0 | trash-restore "$file" >/dev/null  && lf -remote "send $id select \"$file\""
}}

# Empty trash
cmd clear_trash ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "Empty ALL trash? (y/N): "
    read ans
    [ "$ans" = "y" ] && echo 0 | trash-empty >/dev/null && lf -remote "send $id echo 'Trash emptied'"
}}

# File operations
cmd chmod ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    [ -n "$ans" ] && chmod $ans $file && lf -remote "send $id reload"
  done
}}

# Navigation utilities
cmd follow-link %{{
  lf -remote "send $id select \"$(readlink -- "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

cmd goto-file &{{
    if [ -n "$(find -mindepth 1 -maxdepth 1 -type d -print -quit)" ]; then
        lf -remote "send $id :set dironly; bottom; set nodironly; down"
    else
        lf -remote "send $id top"
    fi
}}

# Selection helpers
cmd select-type &{{
    set -f
    [ "$#" -eq 0 ] && exit
    files="$(
        find "$PWD" -mindepth 1 -maxdepth 1 -type "$1" $([ "$lf_hidden" = false ] && printf '%s\n' -not -name '.*') -print0 |
        sed -z 's/\\/\\\\/g;s/"/\\"/g;s/\n/\\n/g;s/^/"/;s/$/"/' |
        tr '\0' ' ')"

    lf -remote "send $id :unselect; toggle $files"
}}
cmd select-dirs select-type d
cmd select-files select-type f

# `set preview true` is a hack used to reload the preview
cmd scroll-preview &{{
    offset=$((lf_user_preview_offset + $1))
    [ $offset -lt 1 ] && offset=1
    lf -remote "send $id :set user_preview_offset $offset; set preview true"
}}
cmd on-select set user_preview_offset 1

# Clipboard Operations
cmd yank-path $printf '%s' "$f" | xclip -i -selection clipboard  # Current file path
cmd yank-name $basename -- "$f" | xclip -i -selection clipboard  # Current filename only
# vim: ft=lf
